//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CLAIM_AND_DISTRIBUTE_DISCRIMINATOR: [u8; 1] = [3];

/// Accounts.
#[derive(Debug)]
pub struct ClaimAndDistribute {
      
              
          pub bot: solana_pubkey::Pubkey,
          
              
          pub authority: solana_pubkey::Pubkey,
          
              
          pub fraction_config: solana_pubkey::Pubkey,
          
              
          pub treasury: solana_pubkey::Pubkey,
          
              
          pub treasury_mint: solana_pubkey::Pubkey,
          
              
          pub bot_token_account: solana_pubkey::Pubkey,
          
              
          pub participant_token_account0: solana_pubkey::Pubkey,
          
              
          pub participant_token_account1: solana_pubkey::Pubkey,
          
              
          pub participant_token_account2: solana_pubkey::Pubkey,
          
              
          pub participant_token_account3: solana_pubkey::Pubkey,
          
              
          pub participant_token_account4: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
      }

impl ClaimAndDistribute {
  pub fn instruction(&self, args: ClaimAndDistributeInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ClaimAndDistributeInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(12+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.bot,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.fraction_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.treasury,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.treasury_mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.bot_token_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.participant_token_account0,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.participant_token_account1,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.participant_token_account2,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.participant_token_account3,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.participant_token_account4,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&ClaimAndDistributeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::FRACTION_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClaimAndDistributeInstructionData {
            discriminator: [u8; 1],
            }

impl ClaimAndDistributeInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [3],
                                }
  }
}

impl Default for ClaimAndDistributeInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClaimAndDistributeInstructionArgs {
                  pub name: String,
      }


/// Instruction builder for `ClaimAndDistribute`.
///
/// ### Accounts:
///
                ///   0. `[signer]` bot
          ///   1. `[]` authority
                ///   2. `[writable]` fraction_config
                ///   3. `[writable]` treasury
          ///   4. `[]` treasury_mint
                ///   5. `[writable]` bot_token_account
                ///   6. `[writable]` participant_token_account0
                ///   7. `[writable]` participant_token_account1
                ///   8. `[writable]` participant_token_account2
                ///   9. `[writable]` participant_token_account3
                ///   10. `[writable]` participant_token_account4
          ///   11. `[]` token_program
#[derive(Clone, Debug, Default)]
pub struct ClaimAndDistributeBuilder {
            bot: Option<solana_pubkey::Pubkey>,
                authority: Option<solana_pubkey::Pubkey>,
                fraction_config: Option<solana_pubkey::Pubkey>,
                treasury: Option<solana_pubkey::Pubkey>,
                treasury_mint: Option<solana_pubkey::Pubkey>,
                bot_token_account: Option<solana_pubkey::Pubkey>,
                participant_token_account0: Option<solana_pubkey::Pubkey>,
                participant_token_account1: Option<solana_pubkey::Pubkey>,
                participant_token_account2: Option<solana_pubkey::Pubkey>,
                participant_token_account3: Option<solana_pubkey::Pubkey>,
                participant_token_account4: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                        name: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ClaimAndDistributeBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn bot(&mut self, bot: solana_pubkey::Pubkey) -> &mut Self {
                        self.bot = Some(bot);
                    self
    }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn fraction_config(&mut self, fraction_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.fraction_config = Some(fraction_config);
                    self
    }
            #[inline(always)]
    pub fn treasury(&mut self, treasury: solana_pubkey::Pubkey) -> &mut Self {
                        self.treasury = Some(treasury);
                    self
    }
            #[inline(always)]
    pub fn treasury_mint(&mut self, treasury_mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.treasury_mint = Some(treasury_mint);
                    self
    }
            #[inline(always)]
    pub fn bot_token_account(&mut self, bot_token_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.bot_token_account = Some(bot_token_account);
                    self
    }
            #[inline(always)]
    pub fn participant_token_account0(&mut self, participant_token_account0: solana_pubkey::Pubkey) -> &mut Self {
                        self.participant_token_account0 = Some(participant_token_account0);
                    self
    }
            #[inline(always)]
    pub fn participant_token_account1(&mut self, participant_token_account1: solana_pubkey::Pubkey) -> &mut Self {
                        self.participant_token_account1 = Some(participant_token_account1);
                    self
    }
            #[inline(always)]
    pub fn participant_token_account2(&mut self, participant_token_account2: solana_pubkey::Pubkey) -> &mut Self {
                        self.participant_token_account2 = Some(participant_token_account2);
                    self
    }
            #[inline(always)]
    pub fn participant_token_account3(&mut self, participant_token_account3: solana_pubkey::Pubkey) -> &mut Self {
                        self.participant_token_account3 = Some(participant_token_account3);
                    self
    }
            #[inline(always)]
    pub fn participant_token_account4(&mut self, participant_token_account4: solana_pubkey::Pubkey) -> &mut Self {
                        self.participant_token_account4 = Some(participant_token_account4);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = ClaimAndDistribute {
                              bot: self.bot.expect("bot is not set"),
                                        authority: self.authority.expect("authority is not set"),
                                        fraction_config: self.fraction_config.expect("fraction_config is not set"),
                                        treasury: self.treasury.expect("treasury is not set"),
                                        treasury_mint: self.treasury_mint.expect("treasury_mint is not set"),
                                        bot_token_account: self.bot_token_account.expect("bot_token_account is not set"),
                                        participant_token_account0: self.participant_token_account0.expect("participant_token_account0 is not set"),
                                        participant_token_account1: self.participant_token_account1.expect("participant_token_account1 is not set"),
                                        participant_token_account2: self.participant_token_account2.expect("participant_token_account2 is not set"),
                                        participant_token_account3: self.participant_token_account3.expect("participant_token_account3 is not set"),
                                        participant_token_account4: self.participant_token_account4.expect("participant_token_account4 is not set"),
                                        token_program: self.token_program.expect("token_program is not set"),
                      };
          let args = ClaimAndDistributeInstructionArgs {
                                                              name: self.name.clone().expect("name is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `claim_and_distribute` CPI accounts.
  pub struct ClaimAndDistributeCpiAccounts<'a, 'b> {
          
                    
              pub bot: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub fraction_config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub treasury: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub treasury_mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub bot_token_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub participant_token_account0: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub participant_token_account1: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub participant_token_account2: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub participant_token_account3: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub participant_token_account4: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `claim_and_distribute` CPI instruction.
pub struct ClaimAndDistributeCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub bot: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub fraction_config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub treasury: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub treasury_mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub bot_token_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub participant_token_account0: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub participant_token_account1: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub participant_token_account2: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub participant_token_account3: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub participant_token_account4: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ClaimAndDistributeInstructionArgs,
  }

impl<'a, 'b> ClaimAndDistributeCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: ClaimAndDistributeCpiAccounts<'a, 'b>,
              args: ClaimAndDistributeInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              bot: accounts.bot,
              authority: accounts.authority,
              fraction_config: accounts.fraction_config,
              treasury: accounts.treasury,
              treasury_mint: accounts.treasury_mint,
              bot_token_account: accounts.bot_token_account,
              participant_token_account0: accounts.participant_token_account0,
              participant_token_account1: accounts.participant_token_account1,
              participant_token_account2: accounts.participant_token_account2,
              participant_token_account3: accounts.participant_token_account3,
              participant_token_account4: accounts.participant_token_account4,
              token_program: accounts.token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(12+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.bot.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.fraction_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.treasury.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.treasury_mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.bot_token_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.participant_token_account0.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.participant_token_account1.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.participant_token_account2.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.participant_token_account3.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.participant_token_account4.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&ClaimAndDistributeInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::FRACTION_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.bot.clone());
                        account_infos.push(self.authority.clone());
                        account_infos.push(self.fraction_config.clone());
                        account_infos.push(self.treasury.clone());
                        account_infos.push(self.treasury_mint.clone());
                        account_infos.push(self.bot_token_account.clone());
                        account_infos.push(self.participant_token_account0.clone());
                        account_infos.push(self.participant_token_account1.clone());
                        account_infos.push(self.participant_token_account2.clone());
                        account_infos.push(self.participant_token_account3.clone());
                        account_infos.push(self.participant_token_account4.clone());
                        account_infos.push(self.token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ClaimAndDistribute` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` bot
          ///   1. `[]` authority
                ///   2. `[writable]` fraction_config
                ///   3. `[writable]` treasury
          ///   4. `[]` treasury_mint
                ///   5. `[writable]` bot_token_account
                ///   6. `[writable]` participant_token_account0
                ///   7. `[writable]` participant_token_account1
                ///   8. `[writable]` participant_token_account2
                ///   9. `[writable]` participant_token_account3
                ///   10. `[writable]` participant_token_account4
          ///   11. `[]` token_program
#[derive(Clone, Debug)]
pub struct ClaimAndDistributeCpiBuilder<'a, 'b> {
  instruction: Box<ClaimAndDistributeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimAndDistributeCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ClaimAndDistributeCpiBuilderInstruction {
      __program: program,
              bot: None,
              authority: None,
              fraction_config: None,
              treasury: None,
              treasury_mint: None,
              bot_token_account: None,
              participant_token_account0: None,
              participant_token_account1: None,
              participant_token_account2: None,
              participant_token_account3: None,
              participant_token_account4: None,
              token_program: None,
                                            name: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn bot(&mut self, bot: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.bot = Some(bot);
                    self
    }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn fraction_config(&mut self, fraction_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fraction_config = Some(fraction_config);
                    self
    }
      #[inline(always)]
    pub fn treasury(&mut self, treasury: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.treasury = Some(treasury);
                    self
    }
      #[inline(always)]
    pub fn treasury_mint(&mut self, treasury_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.treasury_mint = Some(treasury_mint);
                    self
    }
      #[inline(always)]
    pub fn bot_token_account(&mut self, bot_token_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.bot_token_account = Some(bot_token_account);
                    self
    }
      #[inline(always)]
    pub fn participant_token_account0(&mut self, participant_token_account0: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.participant_token_account0 = Some(participant_token_account0);
                    self
    }
      #[inline(always)]
    pub fn participant_token_account1(&mut self, participant_token_account1: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.participant_token_account1 = Some(participant_token_account1);
                    self
    }
      #[inline(always)]
    pub fn participant_token_account2(&mut self, participant_token_account2: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.participant_token_account2 = Some(participant_token_account2);
                    self
    }
      #[inline(always)]
    pub fn participant_token_account3(&mut self, participant_token_account3: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.participant_token_account3 = Some(participant_token_account3);
                    self
    }
      #[inline(always)]
    pub fn participant_token_account4(&mut self, participant_token_account4: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.participant_token_account4 = Some(participant_token_account4);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = ClaimAndDistributeInstructionArgs {
                                                              name: self.instruction.name.clone().expect("name is not set"),
                                    };
        let instruction = ClaimAndDistributeCpi {
        __program: self.instruction.__program,
                  
          bot: self.instruction.bot.expect("bot is not set"),
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          fraction_config: self.instruction.fraction_config.expect("fraction_config is not set"),
                  
          treasury: self.instruction.treasury.expect("treasury is not set"),
                  
          treasury_mint: self.instruction.treasury_mint.expect("treasury_mint is not set"),
                  
          bot_token_account: self.instruction.bot_token_account.expect("bot_token_account is not set"),
                  
          participant_token_account0: self.instruction.participant_token_account0.expect("participant_token_account0 is not set"),
                  
          participant_token_account1: self.instruction.participant_token_account1.expect("participant_token_account1 is not set"),
                  
          participant_token_account2: self.instruction.participant_token_account2.expect("participant_token_account2 is not set"),
                  
          participant_token_account3: self.instruction.participant_token_account3.expect("participant_token_account3 is not set"),
                  
          participant_token_account4: self.instruction.participant_token_account4.expect("participant_token_account4 is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ClaimAndDistributeCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            bot: Option<&'b solana_account_info::AccountInfo<'a>>,
                authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                fraction_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                treasury: Option<&'b solana_account_info::AccountInfo<'a>>,
                treasury_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                bot_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                participant_token_account0: Option<&'b solana_account_info::AccountInfo<'a>>,
                participant_token_account1: Option<&'b solana_account_info::AccountInfo<'a>>,
                participant_token_account2: Option<&'b solana_account_info::AccountInfo<'a>>,
                participant_token_account3: Option<&'b solana_account_info::AccountInfo<'a>>,
                participant_token_account4: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        name: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

