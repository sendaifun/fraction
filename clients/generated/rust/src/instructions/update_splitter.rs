//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::Participant;
use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const UPDATE_SPLITTER_DISCRIMINATOR: [u8; 8] = [45, 2, 199, 7, 96, 249, 137, 255];

/// Accounts.
#[derive(Debug)]
pub struct UpdateSplitter {
      
              
          pub authority: solana_pubkey::Pubkey,
          
              
          pub splitter_config: solana_pubkey::Pubkey,
      }

impl UpdateSplitter {
  pub fn instruction(&self, args: UpdateSplitterInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: UpdateSplitterInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.splitter_config,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&UpdateSplitterInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SPLITS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateSplitterInstructionData {
            discriminator: [u8; 8],
                        }

impl UpdateSplitterInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [45, 2, 199, 7, 96, 249, 137, 255],
                                                            }
  }
}

impl Default for UpdateSplitterInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UpdateSplitterInstructionArgs {
                  pub name: String,
                pub participants: [Participant; 5],
                pub bot_wallet: Pubkey,
      }


/// Instruction builder for `UpdateSplitter`.
///
/// ### Accounts:
///
                ///   0. `[signer]` authority
                ///   1. `[writable]` splitter_config
#[derive(Clone, Debug, Default)]
pub struct UpdateSplitterBuilder {
            authority: Option<solana_pubkey::Pubkey>,
                splitter_config: Option<solana_pubkey::Pubkey>,
                        name: Option<String>,
                participants: Option<[Participant; 5]>,
                bot_wallet: Option<Pubkey>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl UpdateSplitterBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.authority = Some(authority);
                    self
    }
            #[inline(always)]
    pub fn splitter_config(&mut self, splitter_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.splitter_config = Some(splitter_config);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn participants(&mut self, participants: [Participant; 5]) -> &mut Self {
        self.participants = Some(participants);
        self
      }
                #[inline(always)]
      pub fn bot_wallet(&mut self, bot_wallet: Pubkey) -> &mut Self {
        self.bot_wallet = Some(bot_wallet);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = UpdateSplitter {
                              authority: self.authority.expect("authority is not set"),
                                        splitter_config: self.splitter_config.expect("splitter_config is not set"),
                      };
          let args = UpdateSplitterInstructionArgs {
                                                              name: self.name.clone().expect("name is not set"),
                                                                  participants: self.participants.clone().expect("participants is not set"),
                                                                  bot_wallet: self.bot_wallet.clone().expect("bot_wallet is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `update_splitter` CPI accounts.
  pub struct UpdateSplitterCpiAccounts<'a, 'b> {
          
                    
              pub authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub splitter_config: &'b solana_account_info::AccountInfo<'a>,
            }

/// `update_splitter` CPI instruction.
pub struct UpdateSplitterCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub splitter_config: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: UpdateSplitterInstructionArgs,
  }

impl<'a, 'b> UpdateSplitterCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: UpdateSplitterCpiAccounts<'a, 'b>,
              args: UpdateSplitterInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authority: accounts.authority,
              splitter_config: accounts.splitter_config,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.splitter_config.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&UpdateSplitterInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SPLITS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authority.clone());
                        account_infos.push(self.splitter_config.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `UpdateSplitter` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` authority
                ///   1. `[writable]` splitter_config
#[derive(Clone, Debug)]
pub struct UpdateSplitterCpiBuilder<'a, 'b> {
  instruction: Box<UpdateSplitterCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateSplitterCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(UpdateSplitterCpiBuilderInstruction {
      __program: program,
              authority: None,
              splitter_config: None,
                                            name: None,
                                participants: None,
                                bot_wallet: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authority = Some(authority);
                    self
    }
      #[inline(always)]
    pub fn splitter_config(&mut self, splitter_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.splitter_config = Some(splitter_config);
                    self
    }
                    #[inline(always)]
      pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
      }
                #[inline(always)]
      pub fn participants(&mut self, participants: [Participant; 5]) -> &mut Self {
        self.instruction.participants = Some(participants);
        self
      }
                #[inline(always)]
      pub fn bot_wallet(&mut self, bot_wallet: Pubkey) -> &mut Self {
        self.instruction.bot_wallet = Some(bot_wallet);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = UpdateSplitterInstructionArgs {
                                                              name: self.instruction.name.clone().expect("name is not set"),
                                                                  participants: self.instruction.participants.clone().expect("participants is not set"),
                                                                  bot_wallet: self.instruction.bot_wallet.clone().expect("bot_wallet is not set"),
                                    };
        let instruction = UpdateSplitterCpi {
        __program: self.instruction.__program,
                  
          authority: self.instruction.authority.expect("authority is not set"),
                  
          splitter_config: self.instruction.splitter_config.expect("splitter_config is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct UpdateSplitterCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                splitter_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                        name: Option<String>,
                participants: Option<[Participant; 5]>,
                bot_wallet: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

