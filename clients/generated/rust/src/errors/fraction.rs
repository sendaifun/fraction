//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum FractionError {
    /// 6000 - Invalid share distribution - must sum to 10,000
    #[error("Invalid share distribution - must sum to 10,000")]
    InvalidShareDistribution = 0x1770,
    /// 6001 - Insufficient balance for withdrawal
    #[error("Insufficient balance for withdrawal")]
    InsufficientBalance = 0x1771,
    /// 6002 - Unauthorized withdrawal attempt
    #[error("Unauthorized withdrawal attempt")]
    UnauthorizedWithdrawal = 0x1772,
    /// 6003 - Name too long
    #[error("Name too long")]
    NameTooLong = 0x1773,
    /// 6004 - No funds to distribute
    #[error("No funds to distribute")]
    NoFundsToDistribute = 0x1774,
    /// 6005 - Arithmetic overflow
    #[error("Arithmetic overflow")]
    ArithmeticOverflow = 0x1775,
    /// 6006 - Participant wallet mismatch - individual wallet parameters must match participants array
    #[error("Participant wallet mismatch - individual wallet parameters must match participants array")]
    ParticipantWalletMismatch = 0x1776,
    /// 6007 - Duplicate participant wallet detected
    #[error("Duplicate participant wallet detected")]
    DuplicateParticipantWallet = 0x1777,
    /// 6008 - Bot wallet cannot be the same as any participant wallet
    #[error("Bot wallet cannot be the same as any participant wallet")]
    BotWalletConflict = 0x1778,
    /// 6009 - Invalid authority provided
    #[error("Invalid authority provided")]
    InvalidAuthority = 0x1779,
    /// 6010 - Provided name does not match fraction config name
    #[error("Provided name does not match fraction config name")]
    NameMismatch = 0x177A,
    /// 6011 - Invalid bot wallet
    #[error("Invalid bot wallet")]
    InvalidBot = 0x177B,
    /// 6012 - System program cannot be a participant wallet
    #[error("System program cannot be a participant wallet")]
    SystemProgramParticipant = 0x177C,
}

impl From<FractionError> for solana_program_error::ProgramError {
    fn from(e: FractionError) -> Self {
        solana_program_error::ProgramError::Custom(e as u32)
    }
}

