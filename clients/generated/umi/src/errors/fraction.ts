/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidShareDistribution: Invalid share distribution - must sum to 10,000 */
export class InvalidShareDistributionError extends ProgramError {
  override readonly name: string = 'InvalidShareDistribution';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid share distribution - must sum to 10,000', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidShareDistributionError);
nameToErrorMap.set('InvalidShareDistribution', InvalidShareDistributionError);

/** InsufficientBalance: Insufficient balance for withdrawal */
export class InsufficientBalanceError extends ProgramError {
  override readonly name: string = 'InsufficientBalance';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('Insufficient balance for withdrawal', program, cause);
  }
}
codeToErrorMap.set(0x1771, InsufficientBalanceError);
nameToErrorMap.set('InsufficientBalance', InsufficientBalanceError);

/** UnauthorizedWithdrawal: Unauthorized withdrawal attempt */
export class UnauthorizedWithdrawalError extends ProgramError {
  override readonly name: string = 'UnauthorizedWithdrawal';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Unauthorized withdrawal attempt', program, cause);
  }
}
codeToErrorMap.set(0x1772, UnauthorizedWithdrawalError);
nameToErrorMap.set('UnauthorizedWithdrawal', UnauthorizedWithdrawalError);

/** NameTooLong: Name too long */
export class NameTooLongError extends ProgramError {
  override readonly name: string = 'NameTooLong';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Name too long', program, cause);
  }
}
codeToErrorMap.set(0x1773, NameTooLongError);
nameToErrorMap.set('NameTooLong', NameTooLongError);

/** NoFundsToDistribute: No funds to distribute */
export class NoFundsToDistributeError extends ProgramError {
  override readonly name: string = 'NoFundsToDistribute';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('No funds to distribute', program, cause);
  }
}
codeToErrorMap.set(0x1774, NoFundsToDistributeError);
nameToErrorMap.set('NoFundsToDistribute', NoFundsToDistributeError);

/** ArithmeticOverflow: Arithmetic overflow */
export class ArithmeticOverflowError extends ProgramError {
  override readonly name: string = 'ArithmeticOverflow';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Arithmetic overflow', program, cause);
  }
}
codeToErrorMap.set(0x1775, ArithmeticOverflowError);
nameToErrorMap.set('ArithmeticOverflow', ArithmeticOverflowError);

/** ParticipantWalletMismatch: Participant wallet mismatch - individual wallet parameters must match participants array */
export class ParticipantWalletMismatchError extends ProgramError {
  override readonly name: string = 'ParticipantWalletMismatch';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super(
      'Participant wallet mismatch - individual wallet parameters must match participants array',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1776, ParticipantWalletMismatchError);
nameToErrorMap.set('ParticipantWalletMismatch', ParticipantWalletMismatchError);

/** DuplicateParticipantWallet: Duplicate participant wallet detected */
export class DuplicateParticipantWalletError extends ProgramError {
  override readonly name: string = 'DuplicateParticipantWallet';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Duplicate participant wallet detected', program, cause);
  }
}
codeToErrorMap.set(0x1777, DuplicateParticipantWalletError);
nameToErrorMap.set(
  'DuplicateParticipantWallet',
  DuplicateParticipantWalletError
);

/** BotWalletConflict: Bot wallet cannot be the same as any participant wallet */
export class BotWalletConflictError extends ProgramError {
  override readonly name: string = 'BotWalletConflict';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super(
      'Bot wallet cannot be the same as any participant wallet',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1778, BotWalletConflictError);
nameToErrorMap.set('BotWalletConflict', BotWalletConflictError);

/** InvalidAuthority: Invalid authority provided */
export class InvalidAuthorityError extends ProgramError {
  override readonly name: string = 'InvalidAuthority';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Invalid authority provided', program, cause);
  }
}
codeToErrorMap.set(0x1779, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);

/** NameMismatch: Provided name does not match fraction config name */
export class NameMismatchError extends ProgramError {
  override readonly name: string = 'NameMismatch';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Provided name does not match fraction config name', program, cause);
  }
}
codeToErrorMap.set(0x177a, NameMismatchError);
nameToErrorMap.set('NameMismatch', NameMismatchError);

/** InvalidBot: Invalid bot wallet */
export class InvalidBotError extends ProgramError {
  override readonly name: string = 'InvalidBot';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Invalid bot wallet', program, cause);
  }
}
codeToErrorMap.set(0x177b, InvalidBotError);
nameToErrorMap.set('InvalidBot', InvalidBotError);

/** SystemProgramParticipant: System program cannot be a participant wallet */
export class SystemProgramParticipantError extends ProgramError {
  override readonly name: string = 'SystemProgramParticipant';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('System program cannot be a participant wallet', program, cause);
  }
}
codeToErrorMap.set(0x177c, SystemProgramParticipantError);
nameToErrorMap.set('SystemProgramParticipant', SystemProgramParticipantError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getFractionErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getFractionErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
