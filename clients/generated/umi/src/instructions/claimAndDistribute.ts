/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ClaimAndDistributeInstructionAccounts = {
  bot: Signer;
  authority: PublicKey | Pda;
  fractionConfig?: PublicKey | Pda;
  treasury?: PublicKey | Pda;
  treasuryMint: PublicKey | Pda;
  botTokenAccount: PublicKey | Pda;
  participantBalance0: PublicKey | Pda;
  participantBalance1: PublicKey | Pda;
  participantBalance2: PublicKey | Pda;
  participantBalance3: PublicKey | Pda;
  participantBalance4: PublicKey | Pda;
  botBalance?: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
};

// Data.
export type ClaimAndDistributeInstructionData = {
  discriminator: Uint8Array;
  name: string;
};

export type ClaimAndDistributeInstructionDataArgs = { name: string };

export function getClaimAndDistributeInstructionDataSerializer(): Serializer<
  ClaimAndDistributeInstructionDataArgs,
  ClaimAndDistributeInstructionData
> {
  return mapSerializer<
    ClaimAndDistributeInstructionDataArgs,
    any,
    ClaimAndDistributeInstructionData
  >(
    struct<ClaimAndDistributeInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['name', string()],
      ],
      { description: 'ClaimAndDistributeInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([111, 147, 210, 144, 253, 16, 187, 238]),
    })
  ) as Serializer<
    ClaimAndDistributeInstructionDataArgs,
    ClaimAndDistributeInstructionData
  >;
}

// Args.
export type ClaimAndDistributeInstructionArgs =
  ClaimAndDistributeInstructionDataArgs;

// Instruction.
export function claimAndDistribute(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: ClaimAndDistributeInstructionAccounts &
    ClaimAndDistributeInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'fraction',
    'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY'
  );

  // Accounts.
  const resolvedAccounts = {
    bot: { index: 0, isWritable: false as boolean, value: input.bot ?? null },
    authority: {
      index: 1,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    fractionConfig: {
      index: 2,
      isWritable: true as boolean,
      value: input.fractionConfig ?? null,
    },
    treasury: {
      index: 3,
      isWritable: true as boolean,
      value: input.treasury ?? null,
    },
    treasuryMint: {
      index: 4,
      isWritable: false as boolean,
      value: input.treasuryMint ?? null,
    },
    botTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.botTokenAccount ?? null,
    },
    participantBalance0: {
      index: 6,
      isWritable: true as boolean,
      value: input.participantBalance0 ?? null,
    },
    participantBalance1: {
      index: 7,
      isWritable: true as boolean,
      value: input.participantBalance1 ?? null,
    },
    participantBalance2: {
      index: 8,
      isWritable: true as boolean,
      value: input.participantBalance2 ?? null,
    },
    participantBalance3: {
      index: 9,
      isWritable: true as boolean,
      value: input.participantBalance3 ?? null,
    },
    participantBalance4: {
      index: 10,
      isWritable: true as boolean,
      value: input.participantBalance4 ?? null,
    },
    botBalance: {
      index: 11,
      isWritable: true as boolean,
      value: input.botBalance ?? null,
    },
    tokenProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ClaimAndDistributeInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.fractionConfig.value) {
    resolvedAccounts.fractionConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          102, 114, 97, 99, 116, 105, 111, 110, 95, 99, 111, 110, 102, 105, 103,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.authority.value)
      ),
      string().serialize(expectSome(resolvedArgs.name)),
    ]);
  }
  if (!resolvedAccounts.treasury.value) {
    resolvedAccounts.treasury.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.fractionConfig.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.tokenProgram.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.treasuryMint.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.botBalance.value) {
    resolvedAccounts.botBalance.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([98, 111, 116, 95, 98, 97, 108, 97, 110, 99, 101])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.fractionConfig.value)
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.bot.value)
      ),
    ]);
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getClaimAndDistributeInstructionDataSerializer().serialize(
    resolvedArgs as ClaimAndDistributeInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
