/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  Participant,
  ParticipantArgs,
  getParticipantSerializer,
} from '../types';

// Accounts.
export type UpdateFractionInstructionAccounts = {
  authority: Signer;
  fractionConfig: PublicKey | Pda;
};

// Data.
export type UpdateFractionInstructionData = {
  discriminator: Uint8Array;
  name: string;
  participants: Array<Participant>;
  botWallet: PublicKey;
};

export type UpdateFractionInstructionDataArgs = {
  name: string;
  participants: Array<ParticipantArgs>;
  botWallet: PublicKey;
};

export function getUpdateFractionInstructionDataSerializer(): Serializer<
  UpdateFractionInstructionDataArgs,
  UpdateFractionInstructionData
> {
  return mapSerializer<
    UpdateFractionInstructionDataArgs,
    any,
    UpdateFractionInstructionData
  >(
    struct<UpdateFractionInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['name', string()],
        ['participants', array(getParticipantSerializer(), { size: 5 })],
        ['botWallet', publicKeySerializer()],
      ],
      { description: 'UpdateFractionInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([176, 173, 246, 104, 94, 102, 30, 180]),
    })
  ) as Serializer<
    UpdateFractionInstructionDataArgs,
    UpdateFractionInstructionData
  >;
}

// Args.
export type UpdateFractionInstructionArgs = UpdateFractionInstructionDataArgs;

// Instruction.
export function updateFraction(
  context: Pick<Context, 'programs'>,
  input: UpdateFractionInstructionAccounts & UpdateFractionInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'fraction',
    'Ck2PtB73t36kjk4mLUztwsBV9jvq7q3mGfSNmQevwFgg'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    fractionConfig: {
      index: 1,
      isWritable: true as boolean,
      value: input.fractionConfig ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateFractionInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateFractionInstructionDataSerializer().serialize(
    resolvedArgs as UpdateFractionInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
