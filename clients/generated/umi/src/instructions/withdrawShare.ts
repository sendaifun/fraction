/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type WithdrawShareInstructionAccounts = {
  participant: Signer;
  authority: PublicKey | Pda;
  splitterConfig?: PublicKey | Pda;
  participantBalance?: PublicKey | Pda;
  treasury?: PublicKey | Pda;
  treasuryMint: PublicKey | Pda;
  participantTokenAccount: PublicKey | Pda;
  tokenProgram: PublicKey | Pda;
};

// Data.
export type WithdrawShareInstructionData = {
  discriminator: Uint8Array;
  name: string;
};

export type WithdrawShareInstructionDataArgs = { name: string };

export function getWithdrawShareInstructionDataSerializer(): Serializer<
  WithdrawShareInstructionDataArgs,
  WithdrawShareInstructionData
> {
  return mapSerializer<
    WithdrawShareInstructionDataArgs,
    any,
    WithdrawShareInstructionData
  >(
    struct<WithdrawShareInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['name', string()],
      ],
      { description: 'WithdrawShareInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([169, 159, 52, 79, 59, 190, 159, 9]),
    })
  ) as Serializer<
    WithdrawShareInstructionDataArgs,
    WithdrawShareInstructionData
  >;
}

// Args.
export type WithdrawShareInstructionArgs = WithdrawShareInstructionDataArgs;

// Instruction.
export function withdrawShare(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: WithdrawShareInstructionAccounts & WithdrawShareInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'splits',
    'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY'
  );

  // Accounts.
  const resolvedAccounts = {
    participant: {
      index: 0,
      isWritable: false as boolean,
      value: input.participant ?? null,
    },
    authority: {
      index: 1,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    splitterConfig: {
      index: 2,
      isWritable: true as boolean,
      value: input.splitterConfig ?? null,
    },
    participantBalance: {
      index: 3,
      isWritable: true as boolean,
      value: input.participantBalance ?? null,
    },
    treasury: {
      index: 4,
      isWritable: true as boolean,
      value: input.treasury ?? null,
    },
    treasuryMint: {
      index: 5,
      isWritable: false as boolean,
      value: input.treasuryMint ?? null,
    },
    participantTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.participantTokenAccount ?? null,
    },
    tokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: WithdrawShareInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.splitterConfig.value) {
    resolvedAccounts.splitterConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          115, 112, 108, 105, 116, 116, 101, 114, 95, 99, 111, 110, 102, 105,
          103,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.authority.value)
      ),
      string().serialize(expectSome(resolvedArgs.name)),
    ]);
  }
  if (!resolvedAccounts.participantBalance.value) {
    resolvedAccounts.participantBalance.value = context.eddsa.findPda(
      programId,
      [
        bytes().serialize(new Uint8Array([98, 97, 108, 97, 110, 99, 101])),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.splitterConfig.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.participant.value)
        ),
      ]
    );
  }
  if (!resolvedAccounts.treasury.value) {
    resolvedAccounts.treasury.value = context.eddsa.findPda(
      context.programs.getPublicKey(
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
      [
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.splitterConfig.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.tokenProgram.value)
        ),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.treasuryMint.value)
        ),
      ]
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getWithdrawShareInstructionDataSerializer().serialize(
    resolvedArgs as WithdrawShareInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
