/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  expectPublicKey,
  expectSome,
  getAccountMetasAndSigners,
} from '../shared';
import {
  Participant,
  ParticipantArgs,
  getParticipantSerializer,
} from '../types';

// Accounts.
export type InitializeSplitterInstructionAccounts = {
  authority: Signer;
  splitterConfig?: PublicKey | Pda;
  participantBalance0?: PublicKey | Pda;
  participantBalance1?: PublicKey | Pda;
  participantBalance2?: PublicKey | Pda;
  participantBalance3?: PublicKey | Pda;
  participantBalance4?: PublicKey | Pda;
  botBalance?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type InitializeSplitterInstructionData = {
  discriminator: Uint8Array;
  name: string;
  participants: Array<Participant>;
  botWallet: PublicKey;
  participantWallet0: PublicKey;
  participantWallet1: PublicKey;
  participantWallet2: PublicKey;
  participantWallet3: PublicKey;
  participantWallet4: PublicKey;
};

export type InitializeSplitterInstructionDataArgs = {
  name: string;
  participants: Array<ParticipantArgs>;
  botWallet: PublicKey;
  participantWallet0: PublicKey;
  participantWallet1: PublicKey;
  participantWallet2: PublicKey;
  participantWallet3: PublicKey;
  participantWallet4: PublicKey;
};

export function getInitializeSplitterInstructionDataSerializer(): Serializer<
  InitializeSplitterInstructionDataArgs,
  InitializeSplitterInstructionData
> {
  return mapSerializer<
    InitializeSplitterInstructionDataArgs,
    any,
    InitializeSplitterInstructionData
  >(
    struct<InitializeSplitterInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['name', string()],
        ['participants', array(getParticipantSerializer(), { size: 5 })],
        ['botWallet', publicKeySerializer()],
        ['participantWallet0', publicKeySerializer()],
        ['participantWallet1', publicKeySerializer()],
        ['participantWallet2', publicKeySerializer()],
        ['participantWallet3', publicKeySerializer()],
        ['participantWallet4', publicKeySerializer()],
      ],
      { description: 'InitializeSplitterInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([81, 111, 81, 77, 41, 36, 149, 189]),
    })
  ) as Serializer<
    InitializeSplitterInstructionDataArgs,
    InitializeSplitterInstructionData
  >;
}

// Args.
export type InitializeSplitterInstructionArgs =
  InitializeSplitterInstructionDataArgs;

// Instruction.
export function initializeSplitter(
  context: Pick<Context, 'eddsa' | 'programs'>,
  input: InitializeSplitterInstructionAccounts &
    InitializeSplitterInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'splits',
    'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY'
  );

  // Accounts.
  const resolvedAccounts = {
    authority: {
      index: 0,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    splitterConfig: {
      index: 1,
      isWritable: true as boolean,
      value: input.splitterConfig ?? null,
    },
    participantBalance0: {
      index: 2,
      isWritable: true as boolean,
      value: input.participantBalance0 ?? null,
    },
    participantBalance1: {
      index: 3,
      isWritable: true as boolean,
      value: input.participantBalance1 ?? null,
    },
    participantBalance2: {
      index: 4,
      isWritable: true as boolean,
      value: input.participantBalance2 ?? null,
    },
    participantBalance3: {
      index: 5,
      isWritable: true as boolean,
      value: input.participantBalance3 ?? null,
    },
    participantBalance4: {
      index: 6,
      isWritable: true as boolean,
      value: input.participantBalance4 ?? null,
    },
    botBalance: {
      index: 7,
      isWritable: true as boolean,
      value: input.botBalance ?? null,
    },
    systemProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitializeSplitterInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.splitterConfig.value) {
    resolvedAccounts.splitterConfig.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([
          115, 112, 108, 105, 116, 116, 101, 114, 95, 99, 111, 110, 102, 105,
          103,
        ])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.authority.value)
      ),
      string().serialize(expectSome(resolvedArgs.name)),
    ]);
  }
  if (!resolvedAccounts.participantBalance0.value) {
    resolvedAccounts.participantBalance0.value = context.eddsa.findPda(
      programId,
      [
        bytes().serialize(new Uint8Array([98, 97, 108, 97, 110, 99, 101])),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.splitterConfig.value)
        ),
        publicKeySerializer().serialize(
          expectSome(resolvedArgs.participantWallet0)
        ),
      ]
    );
  }
  if (!resolvedAccounts.participantBalance1.value) {
    resolvedAccounts.participantBalance1.value = context.eddsa.findPda(
      programId,
      [
        bytes().serialize(new Uint8Array([98, 97, 108, 97, 110, 99, 101])),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.splitterConfig.value)
        ),
        publicKeySerializer().serialize(
          expectSome(resolvedArgs.participantWallet1)
        ),
      ]
    );
  }
  if (!resolvedAccounts.participantBalance2.value) {
    resolvedAccounts.participantBalance2.value = context.eddsa.findPda(
      programId,
      [
        bytes().serialize(new Uint8Array([98, 97, 108, 97, 110, 99, 101])),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.splitterConfig.value)
        ),
        publicKeySerializer().serialize(
          expectSome(resolvedArgs.participantWallet2)
        ),
      ]
    );
  }
  if (!resolvedAccounts.participantBalance3.value) {
    resolvedAccounts.participantBalance3.value = context.eddsa.findPda(
      programId,
      [
        bytes().serialize(new Uint8Array([98, 97, 108, 97, 110, 99, 101])),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.splitterConfig.value)
        ),
        publicKeySerializer().serialize(
          expectSome(resolvedArgs.participantWallet3)
        ),
      ]
    );
  }
  if (!resolvedAccounts.participantBalance4.value) {
    resolvedAccounts.participantBalance4.value = context.eddsa.findPda(
      programId,
      [
        bytes().serialize(new Uint8Array([98, 97, 108, 97, 110, 99, 101])),
        publicKeySerializer().serialize(
          expectPublicKey(resolvedAccounts.splitterConfig.value)
        ),
        publicKeySerializer().serialize(
          expectSome(resolvedArgs.participantWallet4)
        ),
      ]
    );
  }
  if (!resolvedAccounts.botBalance.value) {
    resolvedAccounts.botBalance.value = context.eddsa.findPda(programId, [
      bytes().serialize(
        new Uint8Array([98, 111, 116, 95, 98, 97, 108, 97, 110, 99, 101])
      ),
      publicKeySerializer().serialize(
        expectPublicKey(resolvedAccounts.splitterConfig.value)
      ),
      publicKeySerializer().serialize(expectSome(resolvedArgs.botWallet)),
    ]);
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'systemProgram',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeSplitterInstructionDataSerializer().serialize(
    resolvedArgs as InitializeSplitterInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
