/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  Participant,
  ParticipantArgs,
  getParticipantSerializer,
} from '../types';

export type FractionConfig = Account<FractionConfigAccountData>;

export type FractionConfigAccountData = {
  discriminator: Uint8Array;
  authority: PublicKey;
  name: string;
  participants: Array<Participant>;
  botWallet: PublicKey;
  incentiveBps: number;
  bump: number;
};

export type FractionConfigAccountDataArgs = {
  authority: PublicKey;
  name: string;
  participants: Array<ParticipantArgs>;
  botWallet: PublicKey;
  incentiveBps: number;
  bump: number;
};

export function getFractionConfigAccountDataSerializer(): Serializer<
  FractionConfigAccountDataArgs,
  FractionConfigAccountData
> {
  return mapSerializer<
    FractionConfigAccountDataArgs,
    any,
    FractionConfigAccountData
  >(
    struct<FractionConfigAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['authority', publicKeySerializer()],
        ['name', string()],
        ['participants', array(getParticipantSerializer(), { size: 5 })],
        ['botWallet', publicKeySerializer()],
        ['incentiveBps', u8()],
        ['bump', u8()],
      ],
      { description: 'FractionConfigAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([164, 123, 52, 71, 72, 174, 132, 174]),
    })
  ) as Serializer<FractionConfigAccountDataArgs, FractionConfigAccountData>;
}

export function deserializeFractionConfig(
  rawAccount: RpcAccount
): FractionConfig {
  return deserializeAccount(
    rawAccount,
    getFractionConfigAccountDataSerializer()
  );
}

export async function fetchFractionConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FractionConfig> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'FractionConfig');
  return deserializeFractionConfig(maybeAccount);
}

export async function safeFetchFractionConfig(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<FractionConfig | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeFractionConfig(maybeAccount) : null;
}

export async function fetchAllFractionConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FractionConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'FractionConfig');
    return deserializeFractionConfig(maybeAccount);
  });
}

export async function safeFetchAllFractionConfig(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<FractionConfig[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeFractionConfig(maybeAccount as RpcAccount)
    );
}

export function getFractionConfigGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'fraction',
    'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      authority: PublicKey;
      name: string;
      participants: Array<ParticipantArgs>;
      botWallet: PublicKey;
      incentiveBps: number;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      authority: [8, publicKeySerializer()],
      name: [40, string()],
      participants: [null, array(getParticipantSerializer(), { size: 5 })],
      botWallet: [null, publicKeySerializer()],
      incentiveBps: [null, u8()],
      bump: [null, u8()],
    })
    .deserializeUsing<FractionConfig>((account) =>
      deserializeFractionConfig(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([164, 123, 52, 71, 72, 174, 132, 174])
    );
}
