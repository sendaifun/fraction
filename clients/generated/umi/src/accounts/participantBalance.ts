/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type ParticipantBalance = Account<ParticipantBalanceAccountData>;

export type ParticipantBalanceAccountData = {
  discriminator: Uint8Array;
  splitter: PublicKey;
  participant: PublicKey;
  amount: bigint;
  bump: number;
};

export type ParticipantBalanceAccountDataArgs = {
  splitter: PublicKey;
  participant: PublicKey;
  amount: number | bigint;
  bump: number;
};

export function getParticipantBalanceAccountDataSerializer(): Serializer<
  ParticipantBalanceAccountDataArgs,
  ParticipantBalanceAccountData
> {
  return mapSerializer<
    ParticipantBalanceAccountDataArgs,
    any,
    ParticipantBalanceAccountData
  >(
    struct<ParticipantBalanceAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['splitter', publicKeySerializer()],
        ['participant', publicKeySerializer()],
        ['amount', u64()],
        ['bump', u8()],
      ],
      { description: 'ParticipantBalanceAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([142, 219, 111, 115, 231, 38, 160, 173]),
    })
  ) as Serializer<
    ParticipantBalanceAccountDataArgs,
    ParticipantBalanceAccountData
  >;
}

export function deserializeParticipantBalance(
  rawAccount: RpcAccount
): ParticipantBalance {
  return deserializeAccount(
    rawAccount,
    getParticipantBalanceAccountDataSerializer()
  );
}

export async function fetchParticipantBalance(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ParticipantBalance> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ParticipantBalance');
  return deserializeParticipantBalance(maybeAccount);
}

export async function safeFetchParticipantBalance(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ParticipantBalance | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeParticipantBalance(maybeAccount)
    : null;
}

export async function fetchAllParticipantBalance(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ParticipantBalance[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ParticipantBalance');
    return deserializeParticipantBalance(maybeAccount);
  });
}

export async function safeFetchAllParticipantBalance(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ParticipantBalance[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeParticipantBalance(maybeAccount as RpcAccount)
    );
}

export function getParticipantBalanceGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'splits',
    'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      splitter: PublicKey;
      participant: PublicKey;
      amount: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      splitter: [8, publicKeySerializer()],
      participant: [40, publicKeySerializer()],
      amount: [72, u64()],
      bump: [80, u8()],
    })
    .deserializeUsing<ParticipantBalance>((account) =>
      deserializeParticipantBalance(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([142, 219, 111, 115, 231, 38, 160, 173])
    );
}
