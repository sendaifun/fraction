/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { SPLITS_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getParticipantDecoder,
  getParticipantEncoder,
  type Participant,
  type ParticipantArgs,
} from '../types';

export const INITIALIZE_SPLITTER_DISCRIMINATOR = new Uint8Array([
  81, 111, 81, 77, 41, 36, 149, 189,
]);

export function getInitializeSplitterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_SPLITTER_DISCRIMINATOR
  );
}

export type InitializeSplitterInstruction<
  TProgram extends string = typeof SPLITS_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountSplitterConfig extends string | AccountMeta<string> = string,
  TAccountParticipantBalance0 extends string | AccountMeta<string> = string,
  TAccountParticipantBalance1 extends string | AccountMeta<string> = string,
  TAccountParticipantBalance2 extends string | AccountMeta<string> = string,
  TAccountParticipantBalance3 extends string | AccountMeta<string> = string,
  TAccountParticipantBalance4 extends string | AccountMeta<string> = string,
  TAccountBotBalance extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountSplitterConfig extends string
        ? WritableAccount<TAccountSplitterConfig>
        : TAccountSplitterConfig,
      TAccountParticipantBalance0 extends string
        ? WritableAccount<TAccountParticipantBalance0>
        : TAccountParticipantBalance0,
      TAccountParticipantBalance1 extends string
        ? WritableAccount<TAccountParticipantBalance1>
        : TAccountParticipantBalance1,
      TAccountParticipantBalance2 extends string
        ? WritableAccount<TAccountParticipantBalance2>
        : TAccountParticipantBalance2,
      TAccountParticipantBalance3 extends string
        ? WritableAccount<TAccountParticipantBalance3>
        : TAccountParticipantBalance3,
      TAccountParticipantBalance4 extends string
        ? WritableAccount<TAccountParticipantBalance4>
        : TAccountParticipantBalance4,
      TAccountBotBalance extends string
        ? WritableAccount<TAccountBotBalance>
        : TAccountBotBalance,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeSplitterInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  participants: Array<Participant>;
  botWallet: Address;
  participantWallet0: Address;
  participantWallet1: Address;
  participantWallet2: Address;
  participantWallet3: Address;
  participantWallet4: Address;
};

export type InitializeSplitterInstructionDataArgs = {
  name: string;
  participants: Array<ParticipantArgs>;
  botWallet: Address;
  participantWallet0: Address;
  participantWallet1: Address;
  participantWallet2: Address;
  participantWallet3: Address;
  participantWallet4: Address;
};

export function getInitializeSplitterInstructionDataEncoder(): Encoder<InitializeSplitterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['participants', getArrayEncoder(getParticipantEncoder(), { size: 5 })],
      ['botWallet', getAddressEncoder()],
      ['participantWallet0', getAddressEncoder()],
      ['participantWallet1', getAddressEncoder()],
      ['participantWallet2', getAddressEncoder()],
      ['participantWallet3', getAddressEncoder()],
      ['participantWallet4', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_SPLITTER_DISCRIMINATOR })
  );
}

export function getInitializeSplitterInstructionDataDecoder(): Decoder<InitializeSplitterInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['participants', getArrayDecoder(getParticipantDecoder(), { size: 5 })],
    ['botWallet', getAddressDecoder()],
    ['participantWallet0', getAddressDecoder()],
    ['participantWallet1', getAddressDecoder()],
    ['participantWallet2', getAddressDecoder()],
    ['participantWallet3', getAddressDecoder()],
    ['participantWallet4', getAddressDecoder()],
  ]);
}

export function getInitializeSplitterInstructionDataCodec(): Codec<
  InitializeSplitterInstructionDataArgs,
  InitializeSplitterInstructionData
> {
  return combineCodec(
    getInitializeSplitterInstructionDataEncoder(),
    getInitializeSplitterInstructionDataDecoder()
  );
}

export type InitializeSplitterAsyncInput<
  TAccountAuthority extends string = string,
  TAccountSplitterConfig extends string = string,
  TAccountParticipantBalance0 extends string = string,
  TAccountParticipantBalance1 extends string = string,
  TAccountParticipantBalance2 extends string = string,
  TAccountParticipantBalance3 extends string = string,
  TAccountParticipantBalance4 extends string = string,
  TAccountBotBalance extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  splitterConfig?: Address<TAccountSplitterConfig>;
  participantBalance0?: Address<TAccountParticipantBalance0>;
  participantBalance1?: Address<TAccountParticipantBalance1>;
  participantBalance2?: Address<TAccountParticipantBalance2>;
  participantBalance3?: Address<TAccountParticipantBalance3>;
  participantBalance4?: Address<TAccountParticipantBalance4>;
  botBalance?: Address<TAccountBotBalance>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitializeSplitterInstructionDataArgs['name'];
  participants: InitializeSplitterInstructionDataArgs['participants'];
  botWallet: InitializeSplitterInstructionDataArgs['botWallet'];
  participantWallet0: InitializeSplitterInstructionDataArgs['participantWallet0'];
  participantWallet1: InitializeSplitterInstructionDataArgs['participantWallet1'];
  participantWallet2: InitializeSplitterInstructionDataArgs['participantWallet2'];
  participantWallet3: InitializeSplitterInstructionDataArgs['participantWallet3'];
  participantWallet4: InitializeSplitterInstructionDataArgs['participantWallet4'];
};

export async function getInitializeSplitterInstructionAsync<
  TAccountAuthority extends string,
  TAccountSplitterConfig extends string,
  TAccountParticipantBalance0 extends string,
  TAccountParticipantBalance1 extends string,
  TAccountParticipantBalance2 extends string,
  TAccountParticipantBalance3 extends string,
  TAccountParticipantBalance4 extends string,
  TAccountBotBalance extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPLITS_PROGRAM_ADDRESS,
>(
  input: InitializeSplitterAsyncInput<
    TAccountAuthority,
    TAccountSplitterConfig,
    TAccountParticipantBalance0,
    TAccountParticipantBalance1,
    TAccountParticipantBalance2,
    TAccountParticipantBalance3,
    TAccountParticipantBalance4,
    TAccountBotBalance,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeSplitterInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountSplitterConfig,
    TAccountParticipantBalance0,
    TAccountParticipantBalance1,
    TAccountParticipantBalance2,
    TAccountParticipantBalance3,
    TAccountParticipantBalance4,
    TAccountBotBalance,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? SPLITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    splitterConfig: { value: input.splitterConfig ?? null, isWritable: true },
    participantBalance0: {
      value: input.participantBalance0 ?? null,
      isWritable: true,
    },
    participantBalance1: {
      value: input.participantBalance1 ?? null,
      isWritable: true,
    },
    participantBalance2: {
      value: input.participantBalance2 ?? null,
      isWritable: true,
    },
    participantBalance3: {
      value: input.participantBalance3 ?? null,
      isWritable: true,
    },
    participantBalance4: {
      value: input.participantBalance4 ?? null,
      isWritable: true,
    },
    botBalance: { value: input.botBalance ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.splitterConfig.value) {
    accounts.splitterConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 112, 108, 105, 116, 116, 101, 114, 95, 99, 111, 110, 102, 105,
            103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.name)
        ),
      ],
    });
  }
  if (!accounts.participantBalance0.value) {
    accounts.participantBalance0.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 97, 108, 97, 110, 99, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.splitterConfig.value)
        ),
        getAddressEncoder().encode(expectSome(args.participantWallet0)),
      ],
    });
  }
  if (!accounts.participantBalance1.value) {
    accounts.participantBalance1.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 97, 108, 97, 110, 99, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.splitterConfig.value)
        ),
        getAddressEncoder().encode(expectSome(args.participantWallet1)),
      ],
    });
  }
  if (!accounts.participantBalance2.value) {
    accounts.participantBalance2.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 97, 108, 97, 110, 99, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.splitterConfig.value)
        ),
        getAddressEncoder().encode(expectSome(args.participantWallet2)),
      ],
    });
  }
  if (!accounts.participantBalance3.value) {
    accounts.participantBalance3.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 97, 108, 97, 110, 99, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.splitterConfig.value)
        ),
        getAddressEncoder().encode(expectSome(args.participantWallet3)),
      ],
    });
  }
  if (!accounts.participantBalance4.value) {
    accounts.participantBalance4.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 97, 108, 97, 110, 99, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.splitterConfig.value)
        ),
        getAddressEncoder().encode(expectSome(args.participantWallet4)),
      ],
    });
  }
  if (!accounts.botBalance.value) {
    accounts.botBalance.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 111, 116, 95, 98, 97, 108, 97, 110, 99, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.splitterConfig.value)
        ),
        getAddressEncoder().encode(expectSome(args.botWallet)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.splitterConfig),
      getAccountMeta(accounts.participantBalance0),
      getAccountMeta(accounts.participantBalance1),
      getAccountMeta(accounts.participantBalance2),
      getAccountMeta(accounts.participantBalance3),
      getAccountMeta(accounts.participantBalance4),
      getAccountMeta(accounts.botBalance),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeSplitterInstructionDataEncoder().encode(
      args as InitializeSplitterInstructionDataArgs
    ),
  } as InitializeSplitterInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountSplitterConfig,
    TAccountParticipantBalance0,
    TAccountParticipantBalance1,
    TAccountParticipantBalance2,
    TAccountParticipantBalance3,
    TAccountParticipantBalance4,
    TAccountBotBalance,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeSplitterInput<
  TAccountAuthority extends string = string,
  TAccountSplitterConfig extends string = string,
  TAccountParticipantBalance0 extends string = string,
  TAccountParticipantBalance1 extends string = string,
  TAccountParticipantBalance2 extends string = string,
  TAccountParticipantBalance3 extends string = string,
  TAccountParticipantBalance4 extends string = string,
  TAccountBotBalance extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  splitterConfig: Address<TAccountSplitterConfig>;
  participantBalance0: Address<TAccountParticipantBalance0>;
  participantBalance1: Address<TAccountParticipantBalance1>;
  participantBalance2: Address<TAccountParticipantBalance2>;
  participantBalance3: Address<TAccountParticipantBalance3>;
  participantBalance4: Address<TAccountParticipantBalance4>;
  botBalance: Address<TAccountBotBalance>;
  systemProgram?: Address<TAccountSystemProgram>;
  name: InitializeSplitterInstructionDataArgs['name'];
  participants: InitializeSplitterInstructionDataArgs['participants'];
  botWallet: InitializeSplitterInstructionDataArgs['botWallet'];
  participantWallet0: InitializeSplitterInstructionDataArgs['participantWallet0'];
  participantWallet1: InitializeSplitterInstructionDataArgs['participantWallet1'];
  participantWallet2: InitializeSplitterInstructionDataArgs['participantWallet2'];
  participantWallet3: InitializeSplitterInstructionDataArgs['participantWallet3'];
  participantWallet4: InitializeSplitterInstructionDataArgs['participantWallet4'];
};

export function getInitializeSplitterInstruction<
  TAccountAuthority extends string,
  TAccountSplitterConfig extends string,
  TAccountParticipantBalance0 extends string,
  TAccountParticipantBalance1 extends string,
  TAccountParticipantBalance2 extends string,
  TAccountParticipantBalance3 extends string,
  TAccountParticipantBalance4 extends string,
  TAccountBotBalance extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof SPLITS_PROGRAM_ADDRESS,
>(
  input: InitializeSplitterInput<
    TAccountAuthority,
    TAccountSplitterConfig,
    TAccountParticipantBalance0,
    TAccountParticipantBalance1,
    TAccountParticipantBalance2,
    TAccountParticipantBalance3,
    TAccountParticipantBalance4,
    TAccountBotBalance,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeSplitterInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountSplitterConfig,
  TAccountParticipantBalance0,
  TAccountParticipantBalance1,
  TAccountParticipantBalance2,
  TAccountParticipantBalance3,
  TAccountParticipantBalance4,
  TAccountBotBalance,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? SPLITS_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: true },
    splitterConfig: { value: input.splitterConfig ?? null, isWritable: true },
    participantBalance0: {
      value: input.participantBalance0 ?? null,
      isWritable: true,
    },
    participantBalance1: {
      value: input.participantBalance1 ?? null,
      isWritable: true,
    },
    participantBalance2: {
      value: input.participantBalance2 ?? null,
      isWritable: true,
    },
    participantBalance3: {
      value: input.participantBalance3 ?? null,
      isWritable: true,
    },
    participantBalance4: {
      value: input.participantBalance4 ?? null,
      isWritable: true,
    },
    botBalance: { value: input.botBalance ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.splitterConfig),
      getAccountMeta(accounts.participantBalance0),
      getAccountMeta(accounts.participantBalance1),
      getAccountMeta(accounts.participantBalance2),
      getAccountMeta(accounts.participantBalance3),
      getAccountMeta(accounts.participantBalance4),
      getAccountMeta(accounts.botBalance),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeSplitterInstructionDataEncoder().encode(
      args as InitializeSplitterInstructionDataArgs
    ),
  } as InitializeSplitterInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountSplitterConfig,
    TAccountParticipantBalance0,
    TAccountParticipantBalance1,
    TAccountParticipantBalance2,
    TAccountParticipantBalance3,
    TAccountParticipantBalance4,
    TAccountBotBalance,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeSplitterInstruction<
  TProgram extends string = typeof SPLITS_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    splitterConfig: TAccountMetas[1];
    participantBalance0: TAccountMetas[2];
    participantBalance1: TAccountMetas[3];
    participantBalance2: TAccountMetas[4];
    participantBalance3: TAccountMetas[5];
    participantBalance4: TAccountMetas[6];
    botBalance: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: InitializeSplitterInstructionData;
};

export function parseInitializeSplitterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeSplitterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      splitterConfig: getNextAccount(),
      participantBalance0: getNextAccount(),
      participantBalance1: getNextAccount(),
      participantBalance2: getNextAccount(),
      participantBalance3: getNextAccount(),
      participantBalance4: getNextAccount(),
      botBalance: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeSplitterInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
