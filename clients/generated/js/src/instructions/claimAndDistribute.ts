/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { FRACTION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const CLAIM_AND_DISTRIBUTE_DISCRIMINATOR = new Uint8Array([3]);

export function getClaimAndDistributeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 1).encode(
    CLAIM_AND_DISTRIBUTE_DISCRIMINATOR
  );
}

export type ClaimAndDistributeInstruction<
  TProgram extends string = typeof FRACTION_PROGRAM_ADDRESS,
  TAccountBot extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountFractionConfig extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountTreasuryMint extends string | AccountMeta<string> = string,
  TAccountBotTokenAccount extends string | AccountMeta<string> = string,
  TAccountParticipantTokenAccount0 extends
    | string
    | AccountMeta<string> = string,
  TAccountParticipantTokenAccount1 extends
    | string
    | AccountMeta<string> = string,
  TAccountParticipantTokenAccount2 extends
    | string
    | AccountMeta<string> = string,
  TAccountParticipantTokenAccount3 extends
    | string
    | AccountMeta<string> = string,
  TAccountParticipantTokenAccount4 extends
    | string
    | AccountMeta<string> = string,
  TAccountTokenProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountBot extends string
        ? ReadonlySignerAccount<TAccountBot> & AccountSignerMeta<TAccountBot>
        : TAccountBot,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountFractionConfig extends string
        ? WritableAccount<TAccountFractionConfig>
        : TAccountFractionConfig,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTreasuryMint extends string
        ? ReadonlyAccount<TAccountTreasuryMint>
        : TAccountTreasuryMint,
      TAccountBotTokenAccount extends string
        ? WritableAccount<TAccountBotTokenAccount>
        : TAccountBotTokenAccount,
      TAccountParticipantTokenAccount0 extends string
        ? WritableAccount<TAccountParticipantTokenAccount0>
        : TAccountParticipantTokenAccount0,
      TAccountParticipantTokenAccount1 extends string
        ? WritableAccount<TAccountParticipantTokenAccount1>
        : TAccountParticipantTokenAccount1,
      TAccountParticipantTokenAccount2 extends string
        ? WritableAccount<TAccountParticipantTokenAccount2>
        : TAccountParticipantTokenAccount2,
      TAccountParticipantTokenAccount3 extends string
        ? WritableAccount<TAccountParticipantTokenAccount3>
        : TAccountParticipantTokenAccount3,
      TAccountParticipantTokenAccount4 extends string
        ? WritableAccount<TAccountParticipantTokenAccount4>
        : TAccountParticipantTokenAccount4,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClaimAndDistributeInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
};

export type ClaimAndDistributeInstructionDataArgs = { name: string };

export function getClaimAndDistributeInstructionDataEncoder(): Encoder<ClaimAndDistributeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 1)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: CLAIM_AND_DISTRIBUTE_DISCRIMINATOR })
  );
}

export function getClaimAndDistributeInstructionDataDecoder(): Decoder<ClaimAndDistributeInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 1)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getClaimAndDistributeInstructionDataCodec(): Codec<
  ClaimAndDistributeInstructionDataArgs,
  ClaimAndDistributeInstructionData
> {
  return combineCodec(
    getClaimAndDistributeInstructionDataEncoder(),
    getClaimAndDistributeInstructionDataDecoder()
  );
}

export type ClaimAndDistributeAsyncInput<
  TAccountBot extends string = string,
  TAccountAuthority extends string = string,
  TAccountFractionConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryMint extends string = string,
  TAccountBotTokenAccount extends string = string,
  TAccountParticipantTokenAccount0 extends string = string,
  TAccountParticipantTokenAccount1 extends string = string,
  TAccountParticipantTokenAccount2 extends string = string,
  TAccountParticipantTokenAccount3 extends string = string,
  TAccountParticipantTokenAccount4 extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  bot: TransactionSigner<TAccountBot>;
  authority: Address<TAccountAuthority>;
  fractionConfig?: Address<TAccountFractionConfig>;
  treasury?: Address<TAccountTreasury>;
  treasuryMint: Address<TAccountTreasuryMint>;
  botTokenAccount: Address<TAccountBotTokenAccount>;
  participantTokenAccount0: Address<TAccountParticipantTokenAccount0>;
  participantTokenAccount1: Address<TAccountParticipantTokenAccount1>;
  participantTokenAccount2: Address<TAccountParticipantTokenAccount2>;
  participantTokenAccount3: Address<TAccountParticipantTokenAccount3>;
  participantTokenAccount4: Address<TAccountParticipantTokenAccount4>;
  tokenProgram: Address<TAccountTokenProgram>;
  name: ClaimAndDistributeInstructionDataArgs['name'];
};

export async function getClaimAndDistributeInstructionAsync<
  TAccountBot extends string,
  TAccountAuthority extends string,
  TAccountFractionConfig extends string,
  TAccountTreasury extends string,
  TAccountTreasuryMint extends string,
  TAccountBotTokenAccount extends string,
  TAccountParticipantTokenAccount0 extends string,
  TAccountParticipantTokenAccount1 extends string,
  TAccountParticipantTokenAccount2 extends string,
  TAccountParticipantTokenAccount3 extends string,
  TAccountParticipantTokenAccount4 extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FRACTION_PROGRAM_ADDRESS,
>(
  input: ClaimAndDistributeAsyncInput<
    TAccountBot,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountBotTokenAccount,
    TAccountParticipantTokenAccount0,
    TAccountParticipantTokenAccount1,
    TAccountParticipantTokenAccount2,
    TAccountParticipantTokenAccount3,
    TAccountParticipantTokenAccount4,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ClaimAndDistributeInstruction<
    TProgramAddress,
    TAccountBot,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountBotTokenAccount,
    TAccountParticipantTokenAccount0,
    TAccountParticipantTokenAccount1,
    TAccountParticipantTokenAccount2,
    TAccountParticipantTokenAccount3,
    TAccountParticipantTokenAccount4,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? FRACTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bot: { value: input.bot ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    fractionConfig: { value: input.fractionConfig ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryMint: { value: input.treasuryMint ?? null, isWritable: false },
    botTokenAccount: { value: input.botTokenAccount ?? null, isWritable: true },
    participantTokenAccount0: {
      value: input.participantTokenAccount0 ?? null,
      isWritable: true,
    },
    participantTokenAccount1: {
      value: input.participantTokenAccount1 ?? null,
      isWritable: true,
    },
    participantTokenAccount2: {
      value: input.participantTokenAccount2 ?? null,
      isWritable: true,
    },
    participantTokenAccount3: {
      value: input.participantTokenAccount3 ?? null,
      isWritable: true,
    },
    participantTokenAccount4: {
      value: input.participantTokenAccount4 ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.fractionConfig.value) {
    accounts.fractionConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            102, 114, 97, 99, 116, 105, 111, 110, 95, 99, 111, 110, 102, 105,
            103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.name)
        ),
      ],
    });
  }
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.fractionConfig.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.treasuryMint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bot),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.fractionConfig),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryMint),
      getAccountMeta(accounts.botTokenAccount),
      getAccountMeta(accounts.participantTokenAccount0),
      getAccountMeta(accounts.participantTokenAccount1),
      getAccountMeta(accounts.participantTokenAccount2),
      getAccountMeta(accounts.participantTokenAccount3),
      getAccountMeta(accounts.participantTokenAccount4),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimAndDistributeInstructionDataEncoder().encode(
      args as ClaimAndDistributeInstructionDataArgs
    ),
  } as ClaimAndDistributeInstruction<
    TProgramAddress,
    TAccountBot,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountBotTokenAccount,
    TAccountParticipantTokenAccount0,
    TAccountParticipantTokenAccount1,
    TAccountParticipantTokenAccount2,
    TAccountParticipantTokenAccount3,
    TAccountParticipantTokenAccount4,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ClaimAndDistributeInput<
  TAccountBot extends string = string,
  TAccountAuthority extends string = string,
  TAccountFractionConfig extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryMint extends string = string,
  TAccountBotTokenAccount extends string = string,
  TAccountParticipantTokenAccount0 extends string = string,
  TAccountParticipantTokenAccount1 extends string = string,
  TAccountParticipantTokenAccount2 extends string = string,
  TAccountParticipantTokenAccount3 extends string = string,
  TAccountParticipantTokenAccount4 extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  bot: TransactionSigner<TAccountBot>;
  authority: Address<TAccountAuthority>;
  fractionConfig: Address<TAccountFractionConfig>;
  treasury: Address<TAccountTreasury>;
  treasuryMint: Address<TAccountTreasuryMint>;
  botTokenAccount: Address<TAccountBotTokenAccount>;
  participantTokenAccount0: Address<TAccountParticipantTokenAccount0>;
  participantTokenAccount1: Address<TAccountParticipantTokenAccount1>;
  participantTokenAccount2: Address<TAccountParticipantTokenAccount2>;
  participantTokenAccount3: Address<TAccountParticipantTokenAccount3>;
  participantTokenAccount4: Address<TAccountParticipantTokenAccount4>;
  tokenProgram: Address<TAccountTokenProgram>;
  name: ClaimAndDistributeInstructionDataArgs['name'];
};

export function getClaimAndDistributeInstruction<
  TAccountBot extends string,
  TAccountAuthority extends string,
  TAccountFractionConfig extends string,
  TAccountTreasury extends string,
  TAccountTreasuryMint extends string,
  TAccountBotTokenAccount extends string,
  TAccountParticipantTokenAccount0 extends string,
  TAccountParticipantTokenAccount1 extends string,
  TAccountParticipantTokenAccount2 extends string,
  TAccountParticipantTokenAccount3 extends string,
  TAccountParticipantTokenAccount4 extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FRACTION_PROGRAM_ADDRESS,
>(
  input: ClaimAndDistributeInput<
    TAccountBot,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountBotTokenAccount,
    TAccountParticipantTokenAccount0,
    TAccountParticipantTokenAccount1,
    TAccountParticipantTokenAccount2,
    TAccountParticipantTokenAccount3,
    TAccountParticipantTokenAccount4,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ClaimAndDistributeInstruction<
  TProgramAddress,
  TAccountBot,
  TAccountAuthority,
  TAccountFractionConfig,
  TAccountTreasury,
  TAccountTreasuryMint,
  TAccountBotTokenAccount,
  TAccountParticipantTokenAccount0,
  TAccountParticipantTokenAccount1,
  TAccountParticipantTokenAccount2,
  TAccountParticipantTokenAccount3,
  TAccountParticipantTokenAccount4,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FRACTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bot: { value: input.bot ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    fractionConfig: { value: input.fractionConfig ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryMint: { value: input.treasuryMint ?? null, isWritable: false },
    botTokenAccount: { value: input.botTokenAccount ?? null, isWritable: true },
    participantTokenAccount0: {
      value: input.participantTokenAccount0 ?? null,
      isWritable: true,
    },
    participantTokenAccount1: {
      value: input.participantTokenAccount1 ?? null,
      isWritable: true,
    },
    participantTokenAccount2: {
      value: input.participantTokenAccount2 ?? null,
      isWritable: true,
    },
    participantTokenAccount3: {
      value: input.participantTokenAccount3 ?? null,
      isWritable: true,
    },
    participantTokenAccount4: {
      value: input.participantTokenAccount4 ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bot),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.fractionConfig),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryMint),
      getAccountMeta(accounts.botTokenAccount),
      getAccountMeta(accounts.participantTokenAccount0),
      getAccountMeta(accounts.participantTokenAccount1),
      getAccountMeta(accounts.participantTokenAccount2),
      getAccountMeta(accounts.participantTokenAccount3),
      getAccountMeta(accounts.participantTokenAccount4),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClaimAndDistributeInstructionDataEncoder().encode(
      args as ClaimAndDistributeInstructionDataArgs
    ),
  } as ClaimAndDistributeInstruction<
    TProgramAddress,
    TAccountBot,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountBotTokenAccount,
    TAccountParticipantTokenAccount0,
    TAccountParticipantTokenAccount1,
    TAccountParticipantTokenAccount2,
    TAccountParticipantTokenAccount3,
    TAccountParticipantTokenAccount4,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedClaimAndDistributeInstruction<
  TProgram extends string = typeof FRACTION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    bot: TAccountMetas[0];
    authority: TAccountMetas[1];
    fractionConfig: TAccountMetas[2];
    treasury: TAccountMetas[3];
    treasuryMint: TAccountMetas[4];
    botTokenAccount: TAccountMetas[5];
    participantTokenAccount0: TAccountMetas[6];
    participantTokenAccount1: TAccountMetas[7];
    participantTokenAccount2: TAccountMetas[8];
    participantTokenAccount3: TAccountMetas[9];
    participantTokenAccount4: TAccountMetas[10];
    tokenProgram: TAccountMetas[11];
  };
  data: ClaimAndDistributeInstructionData;
};

export function parseClaimAndDistributeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedClaimAndDistributeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bot: getNextAccount(),
      authority: getNextAccount(),
      fractionConfig: getNextAccount(),
      treasury: getNextAccount(),
      treasuryMint: getNextAccount(),
      botTokenAccount: getNextAccount(),
      participantTokenAccount0: getNextAccount(),
      participantTokenAccount1: getNextAccount(),
      participantTokenAccount2: getNextAccount(),
      participantTokenAccount3: getNextAccount(),
      participantTokenAccount4: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getClaimAndDistributeInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
