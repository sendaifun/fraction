/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { FRACTION_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_SHARE_DISCRIMINATOR = new Uint8Array([
  169, 159, 52, 79, 59, 190, 159, 9,
]);

export function getWithdrawShareDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_SHARE_DISCRIMINATOR
  );
}

export type WithdrawShareInstruction<
  TProgram extends string = typeof FRACTION_PROGRAM_ADDRESS,
  TAccountParticipant extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountFractionConfig extends string | AccountMeta<string> = string,
  TAccountParticipantBalance extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountTreasuryMint extends string | AccountMeta<string> = string,
  TAccountParticipantTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountParticipant extends string
        ? ReadonlySignerAccount<TAccountParticipant> &
            AccountSignerMeta<TAccountParticipant>
        : TAccountParticipant,
      TAccountAuthority extends string
        ? ReadonlyAccount<TAccountAuthority>
        : TAccountAuthority,
      TAccountFractionConfig extends string
        ? WritableAccount<TAccountFractionConfig>
        : TAccountFractionConfig,
      TAccountParticipantBalance extends string
        ? WritableAccount<TAccountParticipantBalance>
        : TAccountParticipantBalance,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountTreasuryMint extends string
        ? ReadonlyAccount<TAccountTreasuryMint>
        : TAccountTreasuryMint,
      TAccountParticipantTokenAccount extends string
        ? WritableAccount<TAccountParticipantTokenAccount>
        : TAccountParticipantTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawShareInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
};

export type WithdrawShareInstructionDataArgs = { name: string };

export function getWithdrawShareInstructionDataEncoder(): Encoder<WithdrawShareInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_SHARE_DISCRIMINATOR })
  );
}

export function getWithdrawShareInstructionDataDecoder(): Decoder<WithdrawShareInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getWithdrawShareInstructionDataCodec(): Codec<
  WithdrawShareInstructionDataArgs,
  WithdrawShareInstructionData
> {
  return combineCodec(
    getWithdrawShareInstructionDataEncoder(),
    getWithdrawShareInstructionDataDecoder()
  );
}

export type WithdrawShareAsyncInput<
  TAccountParticipant extends string = string,
  TAccountAuthority extends string = string,
  TAccountFractionConfig extends string = string,
  TAccountParticipantBalance extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryMint extends string = string,
  TAccountParticipantTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  participant: TransactionSigner<TAccountParticipant>;
  authority: Address<TAccountAuthority>;
  fractionConfig?: Address<TAccountFractionConfig>;
  participantBalance?: Address<TAccountParticipantBalance>;
  treasury?: Address<TAccountTreasury>;
  treasuryMint: Address<TAccountTreasuryMint>;
  participantTokenAccount: Address<TAccountParticipantTokenAccount>;
  tokenProgram: Address<TAccountTokenProgram>;
  name: WithdrawShareInstructionDataArgs['name'];
};

export async function getWithdrawShareInstructionAsync<
  TAccountParticipant extends string,
  TAccountAuthority extends string,
  TAccountFractionConfig extends string,
  TAccountParticipantBalance extends string,
  TAccountTreasury extends string,
  TAccountTreasuryMint extends string,
  TAccountParticipantTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FRACTION_PROGRAM_ADDRESS,
>(
  input: WithdrawShareAsyncInput<
    TAccountParticipant,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountParticipantBalance,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountParticipantTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawShareInstruction<
    TProgramAddress,
    TAccountParticipant,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountParticipantBalance,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountParticipantTokenAccount,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? FRACTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    participant: { value: input.participant ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    fractionConfig: { value: input.fractionConfig ?? null, isWritable: true },
    participantBalance: {
      value: input.participantBalance ?? null,
      isWritable: true,
    },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryMint: { value: input.treasuryMint ?? null, isWritable: false },
    participantTokenAccount: {
      value: input.participantTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.fractionConfig.value) {
    accounts.fractionConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            102, 114, 97, 99, 116, 105, 111, 110, 95, 99, 111, 110, 102, 105,
            103,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.authority.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.name)
        ),
      ],
    });
  }
  if (!accounts.participantBalance.value) {
    accounts.participantBalance.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([98, 97, 108, 97, 110, 99, 101])
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.fractionConfig.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.participant.value)),
      ],
    });
  }
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(
          expectAddress(accounts.fractionConfig.value)
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.treasuryMint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.participant),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.fractionConfig),
      getAccountMeta(accounts.participantBalance),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryMint),
      getAccountMeta(accounts.participantTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawShareInstructionDataEncoder().encode(
      args as WithdrawShareInstructionDataArgs
    ),
  } as WithdrawShareInstruction<
    TProgramAddress,
    TAccountParticipant,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountParticipantBalance,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountParticipantTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type WithdrawShareInput<
  TAccountParticipant extends string = string,
  TAccountAuthority extends string = string,
  TAccountFractionConfig extends string = string,
  TAccountParticipantBalance extends string = string,
  TAccountTreasury extends string = string,
  TAccountTreasuryMint extends string = string,
  TAccountParticipantTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  participant: TransactionSigner<TAccountParticipant>;
  authority: Address<TAccountAuthority>;
  fractionConfig: Address<TAccountFractionConfig>;
  participantBalance: Address<TAccountParticipantBalance>;
  treasury: Address<TAccountTreasury>;
  treasuryMint: Address<TAccountTreasuryMint>;
  participantTokenAccount: Address<TAccountParticipantTokenAccount>;
  tokenProgram: Address<TAccountTokenProgram>;
  name: WithdrawShareInstructionDataArgs['name'];
};

export function getWithdrawShareInstruction<
  TAccountParticipant extends string,
  TAccountAuthority extends string,
  TAccountFractionConfig extends string,
  TAccountParticipantBalance extends string,
  TAccountTreasury extends string,
  TAccountTreasuryMint extends string,
  TAccountParticipantTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof FRACTION_PROGRAM_ADDRESS,
>(
  input: WithdrawShareInput<
    TAccountParticipant,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountParticipantBalance,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountParticipantTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawShareInstruction<
  TProgramAddress,
  TAccountParticipant,
  TAccountAuthority,
  TAccountFractionConfig,
  TAccountParticipantBalance,
  TAccountTreasury,
  TAccountTreasuryMint,
  TAccountParticipantTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? FRACTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    participant: { value: input.participant ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    fractionConfig: { value: input.fractionConfig ?? null, isWritable: true },
    participantBalance: {
      value: input.participantBalance ?? null,
      isWritable: true,
    },
    treasury: { value: input.treasury ?? null, isWritable: true },
    treasuryMint: { value: input.treasuryMint ?? null, isWritable: false },
    participantTokenAccount: {
      value: input.participantTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.participant),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.fractionConfig),
      getAccountMeta(accounts.participantBalance),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.treasuryMint),
      getAccountMeta(accounts.participantTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getWithdrawShareInstructionDataEncoder().encode(
      args as WithdrawShareInstructionDataArgs
    ),
  } as WithdrawShareInstruction<
    TProgramAddress,
    TAccountParticipant,
    TAccountAuthority,
    TAccountFractionConfig,
    TAccountParticipantBalance,
    TAccountTreasury,
    TAccountTreasuryMint,
    TAccountParticipantTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedWithdrawShareInstruction<
  TProgram extends string = typeof FRACTION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    participant: TAccountMetas[0];
    authority: TAccountMetas[1];
    fractionConfig: TAccountMetas[2];
    participantBalance: TAccountMetas[3];
    treasury: TAccountMetas[4];
    treasuryMint: TAccountMetas[5];
    participantTokenAccount: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
  };
  data: WithdrawShareInstructionData;
};

export function parseWithdrawShareInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawShareInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      participant: getNextAccount(),
      authority: getNextAccount(),
      fractionConfig: getNextAccount(),
      participantBalance: getNextAccount(),
      treasury: getNextAccount(),
      treasuryMint: getNextAccount(),
      participantTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getWithdrawShareInstructionDataDecoder().decode(instruction.data),
  };
}
