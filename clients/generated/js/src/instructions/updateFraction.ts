/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { FRACTION_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getParticipantDecoder,
  getParticipantEncoder,
  type Participant,
  type ParticipantArgs,
} from '../types';

export const UPDATE_FRACTION_DISCRIMINATOR = new Uint8Array([
  176, 173, 246, 104, 94, 102, 30, 180,
]);

export function getUpdateFractionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_FRACTION_DISCRIMINATOR
  );
}

export type UpdateFractionInstruction<
  TProgram extends string = typeof FRACTION_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountFractionConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountFractionConfig extends string
        ? WritableAccount<TAccountFractionConfig>
        : TAccountFractionConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateFractionInstructionData = {
  discriminator: ReadonlyUint8Array;
  name: string;
  participants: Array<Participant>;
  botWallet: Address;
};

export type UpdateFractionInstructionDataArgs = {
  name: string;
  participants: Array<ParticipantArgs>;
  botWallet: Address;
};

export function getUpdateFractionInstructionDataEncoder(): Encoder<UpdateFractionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['participants', getArrayEncoder(getParticipantEncoder(), { size: 5 })],
      ['botWallet', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_FRACTION_DISCRIMINATOR })
  );
}

export function getUpdateFractionInstructionDataDecoder(): Decoder<UpdateFractionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['participants', getArrayDecoder(getParticipantDecoder(), { size: 5 })],
    ['botWallet', getAddressDecoder()],
  ]);
}

export function getUpdateFractionInstructionDataCodec(): Codec<
  UpdateFractionInstructionDataArgs,
  UpdateFractionInstructionData
> {
  return combineCodec(
    getUpdateFractionInstructionDataEncoder(),
    getUpdateFractionInstructionDataDecoder()
  );
}

export type UpdateFractionInput<
  TAccountAuthority extends string = string,
  TAccountFractionConfig extends string = string,
> = {
  authority: TransactionSigner<TAccountAuthority>;
  fractionConfig: Address<TAccountFractionConfig>;
  name: UpdateFractionInstructionDataArgs['name'];
  participants: UpdateFractionInstructionDataArgs['participants'];
  botWallet: UpdateFractionInstructionDataArgs['botWallet'];
};

export function getUpdateFractionInstruction<
  TAccountAuthority extends string,
  TAccountFractionConfig extends string,
  TProgramAddress extends Address = typeof FRACTION_PROGRAM_ADDRESS,
>(
  input: UpdateFractionInput<TAccountAuthority, TAccountFractionConfig>,
  config?: { programAddress?: TProgramAddress }
): UpdateFractionInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountFractionConfig
> {
  // Program address.
  const programAddress = config?.programAddress ?? FRACTION_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    fractionConfig: { value: input.fractionConfig ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.fractionConfig),
    ],
    programAddress,
    data: getUpdateFractionInstructionDataEncoder().encode(
      args as UpdateFractionInstructionDataArgs
    ),
  } as UpdateFractionInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountFractionConfig
  >;

  return instruction;
}

export type ParsedUpdateFractionInstruction<
  TProgram extends string = typeof FRACTION_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    authority: TAccountMetas[0];
    fractionConfig: TAccountMetas[1];
  };
  data: UpdateFractionInstructionData;
};

export function parseUpdateFractionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateFractionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      fractionConfig: getNextAccount(),
    },
    data: getUpdateFractionInstructionDataDecoder().decode(instruction.data),
  };
}
