/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { SPLITS_PROGRAM_ADDRESS } from '../programs';

/** InvalidShareDistribution: Invalid share distribution - must sum to 10,000 */
export const SPLITS_ERROR__INVALID_SHARE_DISTRIBUTION = 0x1770; // 6000
/** InsufficientBalance: Insufficient balance for withdrawal */
export const SPLITS_ERROR__INSUFFICIENT_BALANCE = 0x1771; // 6001
/** UnauthorizedWithdrawal: Unauthorized withdrawal attempt */
export const SPLITS_ERROR__UNAUTHORIZED_WITHDRAWAL = 0x1772; // 6002
/** NameTooLong: Name too long */
export const SPLITS_ERROR__NAME_TOO_LONG = 0x1773; // 6003
/** NoFundsToDistribute: No funds to distribute */
export const SPLITS_ERROR__NO_FUNDS_TO_DISTRIBUTE = 0x1774; // 6004
/** ArithmeticOverflow: Arithmetic overflow */
export const SPLITS_ERROR__ARITHMETIC_OVERFLOW = 0x1775; // 6005
/** ParticipantWalletMismatch: Participant wallet mismatch - individual wallet parameters must match participants array */
export const SPLITS_ERROR__PARTICIPANT_WALLET_MISMATCH = 0x1776; // 6006
/** DuplicateParticipantWallet: Duplicate participant wallet detected */
export const SPLITS_ERROR__DUPLICATE_PARTICIPANT_WALLET = 0x1777; // 6007
/** BotWalletConflict: Bot wallet cannot be the same as any participant wallet */
export const SPLITS_ERROR__BOT_WALLET_CONFLICT = 0x1778; // 6008
/** InvalidAuthority: Invalid authority provided */
export const SPLITS_ERROR__INVALID_AUTHORITY = 0x1779; // 6009
/** NameMismatch: Provided name does not match splitter config name */
export const SPLITS_ERROR__NAME_MISMATCH = 0x177a; // 6010
/** InvalidBot: Invalid bot wallet */
export const SPLITS_ERROR__INVALID_BOT = 0x177b; // 6011

export type SplitsError =
  | typeof SPLITS_ERROR__ARITHMETIC_OVERFLOW
  | typeof SPLITS_ERROR__BOT_WALLET_CONFLICT
  | typeof SPLITS_ERROR__DUPLICATE_PARTICIPANT_WALLET
  | typeof SPLITS_ERROR__INSUFFICIENT_BALANCE
  | typeof SPLITS_ERROR__INVALID_AUTHORITY
  | typeof SPLITS_ERROR__INVALID_BOT
  | typeof SPLITS_ERROR__INVALID_SHARE_DISTRIBUTION
  | typeof SPLITS_ERROR__NAME_MISMATCH
  | typeof SPLITS_ERROR__NAME_TOO_LONG
  | typeof SPLITS_ERROR__NO_FUNDS_TO_DISTRIBUTE
  | typeof SPLITS_ERROR__PARTICIPANT_WALLET_MISMATCH
  | typeof SPLITS_ERROR__UNAUTHORIZED_WITHDRAWAL;

let splitsErrorMessages: Record<SplitsError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  splitsErrorMessages = {
    [SPLITS_ERROR__ARITHMETIC_OVERFLOW]: `Arithmetic overflow`,
    [SPLITS_ERROR__BOT_WALLET_CONFLICT]: `Bot wallet cannot be the same as any participant wallet`,
    [SPLITS_ERROR__DUPLICATE_PARTICIPANT_WALLET]: `Duplicate participant wallet detected`,
    [SPLITS_ERROR__INSUFFICIENT_BALANCE]: `Insufficient balance for withdrawal`,
    [SPLITS_ERROR__INVALID_AUTHORITY]: `Invalid authority provided`,
    [SPLITS_ERROR__INVALID_BOT]: `Invalid bot wallet`,
    [SPLITS_ERROR__INVALID_SHARE_DISTRIBUTION]: `Invalid share distribution - must sum to 10,000`,
    [SPLITS_ERROR__NAME_MISMATCH]: `Provided name does not match splitter config name`,
    [SPLITS_ERROR__NAME_TOO_LONG]: `Name too long`,
    [SPLITS_ERROR__NO_FUNDS_TO_DISTRIBUTE]: `No funds to distribute`,
    [SPLITS_ERROR__PARTICIPANT_WALLET_MISMATCH]: `Participant wallet mismatch - individual wallet parameters must match participants array`,
    [SPLITS_ERROR__UNAUTHORIZED_WITHDRAWAL]: `Unauthorized withdrawal attempt`,
  };
}

export function getSplitsErrorMessage(code: SplitsError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (splitsErrorMessages as Record<SplitsError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSplitsError<TProgramErrorCode extends SplitsError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SPLITS_PROGRAM_ADDRESS,
    code
  );
}
