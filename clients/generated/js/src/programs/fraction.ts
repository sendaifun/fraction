/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedClaimAndDistributeInstruction,
  type ParsedInitializeFractionInstruction,
  type ParsedUpdateFractionInstruction,
  type ParsedWithdrawShareInstruction,
} from '../instructions';

export const FRACTION_PROGRAM_ADDRESS =
  'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY' as Address<'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY'>;

export enum FractionAccount {
  FractionConfig,
  ParticipantBalance,
}

export function identifyFractionAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): FractionAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 123, 52, 71, 72, 174, 132, 174])
      ),
      0
    )
  ) {
    return FractionAccount.FractionConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([142, 219, 111, 115, 231, 38, 160, 173])
      ),
      0
    )
  ) {
    return FractionAccount.ParticipantBalance;
  }
  throw new Error(
    'The provided account could not be identified as a fraction account.'
  );
}

export enum FractionInstruction {
  ClaimAndDistribute,
  InitializeFraction,
  UpdateFraction,
  WithdrawShare,
}

export function identifyFractionInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): FractionInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([111, 147, 210, 144, 253, 16, 187, 238])
      ),
      0
    )
  ) {
    return FractionInstruction.ClaimAndDistribute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([159, 21, 140, 42, 52, 59, 103, 82])
      ),
      0
    )
  ) {
    return FractionInstruction.InitializeFraction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([176, 173, 246, 104, 94, 102, 30, 180])
      ),
      0
    )
  ) {
    return FractionInstruction.UpdateFraction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 159, 52, 79, 59, 190, 159, 9])
      ),
      0
    )
  ) {
    return FractionInstruction.WithdrawShare;
  }
  throw new Error(
    'The provided instruction could not be identified as a fraction instruction.'
  );
}

export type ParsedFractionInstruction<
  TProgram extends string = 'FM9hKTFN98M2uo7zw2huAbx7vJTQpfgFuxr9rVCTt8UY',
> =
  | ({
      instructionType: FractionInstruction.ClaimAndDistribute;
    } & ParsedClaimAndDistributeInstruction<TProgram>)
  | ({
      instructionType: FractionInstruction.InitializeFraction;
    } & ParsedInitializeFractionInstruction<TProgram>)
  | ({
      instructionType: FractionInstruction.UpdateFraction;
    } & ParsedUpdateFractionInstruction<TProgram>)
  | ({
      instructionType: FractionInstruction.WithdrawShare;
    } & ParsedWithdrawShareInstruction<TProgram>);
