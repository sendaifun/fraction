/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getParticipantDecoder,
  getParticipantEncoder,
  type Participant,
  type ParticipantArgs,
} from '../types';

export const SPLITTER_CONFIG_DISCRIMINATOR = new Uint8Array([
  37, 70, 66, 89, 147, 213, 59, 153,
]);

export function getSplitterConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SPLITTER_CONFIG_DISCRIMINATOR
  );
}

export type SplitterConfig = {
  discriminator: ReadonlyUint8Array;
  authority: Address;
  name: string;
  participants: Array<Participant>;
  botWallet: Address;
  incentiveBps: number;
  bump: number;
};

export type SplitterConfigArgs = {
  authority: Address;
  name: string;
  participants: Array<ParticipantArgs>;
  botWallet: Address;
  incentiveBps: number;
  bump: number;
};

export function getSplitterConfigEncoder(): Encoder<SplitterConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['name', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['participants', getArrayEncoder(getParticipantEncoder(), { size: 5 })],
      ['botWallet', getAddressEncoder()],
      ['incentiveBps', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SPLITTER_CONFIG_DISCRIMINATOR })
  );
}

export function getSplitterConfigDecoder(): Decoder<SplitterConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['name', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['participants', getArrayDecoder(getParticipantDecoder(), { size: 5 })],
    ['botWallet', getAddressDecoder()],
    ['incentiveBps', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getSplitterConfigCodec(): Codec<
  SplitterConfigArgs,
  SplitterConfig
> {
  return combineCodec(getSplitterConfigEncoder(), getSplitterConfigDecoder());
}

export function decodeSplitterConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<SplitterConfig, TAddress>;
export function decodeSplitterConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<SplitterConfig, TAddress>;
export function decodeSplitterConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<SplitterConfig, TAddress> | MaybeAccount<SplitterConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSplitterConfigDecoder()
  );
}

export async function fetchSplitterConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<SplitterConfig, TAddress>> {
  const maybeAccount = await fetchMaybeSplitterConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSplitterConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<SplitterConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSplitterConfig(maybeAccount);
}

export async function fetchAllSplitterConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<SplitterConfig>[]> {
  const maybeAccounts = await fetchAllMaybeSplitterConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSplitterConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<SplitterConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeSplitterConfig(maybeAccount)
  );
}
