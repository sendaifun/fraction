/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PARTICIPANT_BALANCE_DISCRIMINATOR = new Uint8Array([
  142, 219, 111, 115, 231, 38, 160, 173,
]);

export function getParticipantBalanceDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PARTICIPANT_BALANCE_DISCRIMINATOR
  );
}

export type ParticipantBalance = {
  discriminator: ReadonlyUint8Array;
  splitter: Address;
  participant: Address;
  amount: bigint;
  bump: number;
};

export type ParticipantBalanceArgs = {
  splitter: Address;
  participant: Address;
  amount: number | bigint;
  bump: number;
};

export function getParticipantBalanceEncoder(): FixedSizeEncoder<ParticipantBalanceArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['splitter', getAddressEncoder()],
      ['participant', getAddressEncoder()],
      ['amount', getU64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PARTICIPANT_BALANCE_DISCRIMINATOR })
  );
}

export function getParticipantBalanceDecoder(): FixedSizeDecoder<ParticipantBalance> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['splitter', getAddressDecoder()],
    ['participant', getAddressDecoder()],
    ['amount', getU64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getParticipantBalanceCodec(): FixedSizeCodec<
  ParticipantBalanceArgs,
  ParticipantBalance
> {
  return combineCodec(
    getParticipantBalanceEncoder(),
    getParticipantBalanceDecoder()
  );
}

export function decodeParticipantBalance<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ParticipantBalance, TAddress>;
export function decodeParticipantBalance<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ParticipantBalance, TAddress>;
export function decodeParticipantBalance<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ParticipantBalance, TAddress>
  | MaybeAccount<ParticipantBalance, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getParticipantBalanceDecoder()
  );
}

export async function fetchParticipantBalance<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ParticipantBalance, TAddress>> {
  const maybeAccount = await fetchMaybeParticipantBalance(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeParticipantBalance<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ParticipantBalance, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeParticipantBalance(maybeAccount);
}

export async function fetchAllParticipantBalance(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ParticipantBalance>[]> {
  const maybeAccounts = await fetchAllMaybeParticipantBalance(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeParticipantBalance(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ParticipantBalance>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeParticipantBalance(maybeAccount)
  );
}
